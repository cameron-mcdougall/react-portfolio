{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\44799\\\\Documents\\\\Code\\\\cameron-mcdougall\\\\react-portfolio\\\\client\\\\src\\\\PortfolioAssemble.js\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport Filter from './FilterItems';\nimport PortfolioItem from './PortfolioItem';\nimport ProjectDisplay from './ProjectDisplay';\nimport { portfolioElements } from './Content';\n\nclass PortfolioAssemble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: ''\n    };\n    this.filterUpdate = this.filterUpdate.bind(this);\n  }\n\n  filterUpdate(event, type) {\n    this.setState({\n      filter: type\n    });\n  }\n\n  render() {\n    /*/ Randomiser function\n    const shuffle = array => {\n    \tfor (let i = array.length - 1; i > 0; i--) {\n    \t\tlet j = Math.floor(Math.random() * (i + 1)); // Random index from 0 to i\n    \t\t\t// Swap elements array[i] and array[j] (using destructing assignmnet)\n    \t\t[array[i], array[j]] = [array[j], array[i]];\n    \t}\n    \treturn array;\n    } */\n    // Randomise and filter (is applicable) the projects\n    const shuffledPortfolio = this.state.filter === 'All' ? portfolioElements : portfolioElements.filter(work => work.type.includes(this.state.filter)); //const shuffledPortfolio = this.state.filter === 'All' ? shuffle(portfolioElements) : shuffle(portfolioElements).filter(work => work.type.includes(this.state.filter));\n    // Map newly created projects array\n\n    const portfolioLinkAssembly = Object.keys(shuffledPortfolio).map(key => React.createElement(PortfolioItem, {\n      key: key,\n      item: shuffledPortfolio[key],\n      link: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })); // Map corrisponding Routes for PorjectDisplay\n\n    const portfolioItemAssembly = Object.keys(shuffledPortfolio).map(element => React.createElement(Route, {\n      key: element,\n      path: shuffledPortfolio[element].id,\n      render: props => React.createElement(ProjectDisplay, Object.assign({}, props, {\n        position: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n    console.log(shuffledPortfolio);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Filter, {\n      filterUpdate: this.filterUpdate.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), portfolioLinkAssembly, portfolioItemAssembly);\n  }\n\n}\n\nexport default PortfolioAssemble;","map":{"version":3,"sources":["C:/Users/44799/Documents/Code/cameron-mcdougall/react-portfolio/client/src/PortfolioAssemble.js"],"names":["React","Route","Filter","PortfolioItem","ProjectDisplay","portfolioElements","PortfolioAssemble","Component","constructor","props","state","filter","filterUpdate","bind","event","type","setState","render","shuffledPortfolio","work","includes","portfolioLinkAssembly","Object","keys","map","key","portfolioItemAssembly","element","id","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,iBAAT,QAAkC,WAAlC;;AAGA,MAAMC,iBAAN,SAAgCN,KAAK,CAACO,SAAtC,CAAgD;AAE/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACZC,MAAAA,MAAM,EAAE;AADI,KAAb;AAIA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AAEA;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQC,IAAR,EAAc;AAEzB,SAAKC,QAAL,CAAc;AACbL,MAAAA,MAAM,EAAEI;AADK,KAAd;AAIA;;AAEDE,EAAAA,MAAM,GAAG;AAER;;;;;;;;;AAWA;AACA,UAAMC,iBAAiB,GAAG,KAAKR,KAAL,CAAWC,MAAX,KAAsB,KAAtB,GAA8BN,iBAA9B,GAAkDA,iBAAiB,CAACM,MAAlB,CAAyBQ,IAAI,IAAIA,IAAI,CAACJ,IAAL,CAAUK,QAAV,CAAmB,KAAKV,KAAL,CAAWC,MAA9B,CAAjC,CAA5E,CAdQ,CAeR;AAEA;;AACA,UAAMU,qBAAqB,GAAGC,MAAM,CAACC,IAAP,CAAYL,iBAAZ,EAA+BM,GAA/B,CAAmCC,GAAG,IAChE,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEA,GAApB;AAAyB,MAAA,IAAI,EAAEP,iBAAiB,CAACO,GAAD,CAAhD;AAAuD,MAAA,IAAI,EAAEA,GAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD0B,CAA9B,CAlBQ,CAsBR;;AACA,UAAMC,qBAAqB,GAAGJ,MAAM,CAACC,IAAP,CAAYL,iBAAZ,EAA+BM,GAA/B,CAAmCG,OAAO,IACvE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,OAAZ;AAAqB,MAAA,IAAI,EAAET,iBAAiB,CAACS,OAAD,CAAjB,CAA2BC,EAAtD;AAA0D,MAAA,MAAM,EAAGnB,KAAD,IAAW,oBAAC,cAAD,oBAAoBA,KAApB;AAA2B,QAAA,QAAQ,EAAEkB,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD6B,CAA9B;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAYZ,iBAAZ;AAEA,WACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,MAAD;AACC,MAAA,YAAY,EAAE,KAAKN,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAIEQ,qBAJF,EAKEK,qBALF,CADD;AASA;;AA3D8C;;AA8DhD,eAAepB,iBAAf","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Filter from './FilterItems';\nimport PortfolioItem from './PortfolioItem';\nimport ProjectDisplay from './ProjectDisplay';\nimport { portfolioElements } from './Content';\n\n\nclass PortfolioAssemble extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tfilter: ''\n\t\t};\n\n\t\tthis.filterUpdate = this.filterUpdate.bind(this);\n\n\t}\n\n\tfilterUpdate(event, type) {\n\n\t\tthis.setState({\n\t\t\tfilter: type\n\t\t})\n\t\n\t}\n\n\trender() {\n\n\t\t/*/ Randomiser function\n\t\tconst shuffle = array => {\n\t\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\t\tlet j = Math.floor(Math.random() * (i + 1)); // Random index from 0 to i\n\n\t\t\t\t// Swap elements array[i] and array[j] (using destructing assignmnet)\n\t\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t\t}\n\t\t\treturn array;\n\t\t} */\n\n\t\t// Randomise and filter (is applicable) the projects\n\t\tconst shuffledPortfolio = this.state.filter === 'All' ? portfolioElements : portfolioElements.filter(work => work.type.includes(this.state.filter));\n\t\t//const shuffledPortfolio = this.state.filter === 'All' ? shuffle(portfolioElements) : shuffle(portfolioElements).filter(work => work.type.includes(this.state.filter));\n\n\t\t// Map newly created projects array\n\t\tconst portfolioLinkAssembly = Object.keys(shuffledPortfolio).map(key => \n\t    \t<PortfolioItem key={key} item={shuffledPortfolio[key]} link={key} />\n\t\t)\n\n\t\t// Map corrisponding Routes for PorjectDisplay\n\t\tconst portfolioItemAssembly = Object.keys(shuffledPortfolio).map(element =>\n\t\t\t<Route key={element} path={shuffledPortfolio[element].id} render={(props) => <ProjectDisplay {...props} position={element} />} />\n\t\t)\n\n\t\tconsole.log(shuffledPortfolio);\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Filter\n\t\t\t\t\tfilterUpdate={this.filterUpdate.bind(this)}\n\t\t\t\t/>\n\t\t\t\t{portfolioLinkAssembly}\n\t\t\t\t{portfolioItemAssembly}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default PortfolioAssemble;"]},"metadata":{},"sourceType":"module"}